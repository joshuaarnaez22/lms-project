datasource db {
    provider     = "mongodb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters", "fullTextSearch", "fullTextIndex"]
}

model Course {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    userId      String
    title       String
    description String?
    imageUrl    String?
    price       Float?
    isPublished Boolean? @default(false)

    categoryId String?   @db.ObjectId
    category   Category? @relation(fields: [categoryId], references: [id])

    attachment Attachment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    chapter  Chapter[]
    purchase Purchase[]

    @@index([categoryId])
}

model Category {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    name   String   @unique
    course Course[]
}

model Attachment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    url       String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    courseId String @unique @db.ObjectId
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Chapter {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String?
    videoUrl    String?
    position    Int
    isPublished Boolean @default(false)
    isFree      Boolean @default(false)

    muxData MuxData?

    courseId String @unique @db.ObjectId
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    userProgress UserProgress[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MuxData {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    assetId    String
    playbackId String?

    chapterId String  @unique @db.ObjectId
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    userId      String
    isCompleted Boolean @default(false)

    chapterId String  @unique @db.ObjectId
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([chapterId, userId])
}

model Purchase {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    userId String

    courseId String @unique @db.ObjectId
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([courseId, userId])
}

model StripCustomer {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    userId String @unique

    stripeCustomerId String
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}
